apiVersion: apps/v1
kind: Deployment
{{- $fullname := include "app.fullname" . }}
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  {{- if eq .Values.deploymentStrategy "Recreate" }}
  strategy:
    type: Recreate
  {{- else if eq .Values.deploymentStrategy "RollingUpdate" }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.maxUnavailable }}
      maxSurge: {{ .Values.maxSurge }}
  {{- end }}
  {{- if and (not .Values.autoscaling.enabled) (not .Values.autoscalingKeda.enabled) }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.initContainer.enabled }}
      initContainer:
        - name: {{ .Chart.Name }}-init
          securityContext:
            {{- toYaml .Values.initContainer.securityContext | nindent 12 }}
          image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag | default .Chart.AppVersion }}"
          {{- if .Values.image.args }}
          args:
            {{- range .Values.initContainer.image.args }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          env:
            - name: APP_NAME
              value: {{ $fullname }}
            - name: APP_IMAGE_NAME
              value: {{ .Values.initContainer.image.repository }}
            - name: APP_IMAGE_TAG
              value: {{ .Values.initContainer.image.tag | default .Chart.AppVersion }}
            {{- range $key, $value := .Values.initContainer.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- if or .Values.initContainer.configmaps.enabled .Values.initContainer.secrets.enabled }}
          envFrom:
          {{- range .Values.initContainer.configmaps.names }}
            - configMapRef:
                name: {{ . }}
          {{- end }}
          {{- if and .Values.initContainer.secrets.enabled .Values.initContainer.secrets.toEnv }}
          {{- range .Values.initContainer.secrets.toEnv }}
            - name: {{ .env }}
              valueFrom:
                secretKeyRef:
                  name: {{ $fullname }}-secrets
                  key: {{ .secret }}
          {{- end }}
          {{- end }}
          {{- if and .Values.initContainer.secrets.enabled .Values.initContainer.secrets.toEnvironments }}
            - secretRef:
                name: {{ $fullname }}-secrets-env
          {{- end }}
          {{- end }}
          imagePullPolicy: {{ .Values.initContainer.image.pullPolicy }}
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.initContainer.healthCheck.healthCheckPath | quote }}
              port: http
            initialDelaySeconds: {{ .Values.initContainer.healthCheck.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.initContainer.healthCheck.timeoutSeconds }}
            periodSeconds: {{ .Values.initContainer.healthCheck.periodSeconds }}
            successThreshold: {{ .Values.initContainer.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.initContainer.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.initContainer.healthCheck.healthCheckPath | quote }}
              port: http
            initialDelaySeconds: {{ .Values.initContainer.healthCheck.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.initContainer.healthCheck.timeoutSeconds }}
            periodSeconds: {{ .Values.initContainer.healthCheck.periodSeconds }}
            successThreshold: {{ .Values.initContainer.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.initContainer.healthCheck.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.initContainer.resources | nindent 12 }}
          {{- if .Values.initContainer.secrets.enabled }}
          {{- if .Values.initContainer.secrets.toFiles}}
          volumeMounts:
          - name: secrets-volume
            mountPath: {{ .Values.initContainer.secrets.secretsDir }}
          {{- end }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- if .Values.image.args }}
          args:
            {{- range .Values.image.args }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          env:
            - name: APP_NAME
              value: {{ $fullname }}
            - name: APP_IMAGE_NAME
              value: {{ .Values.image.repository }}
            - name: APP_IMAGE_TAG
              value: {{ .Values.image.tag | default .Chart.AppVersion }}
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- if or .Values.configmaps.enabled .Values.secrets.enabled }}
          envFrom:
          {{- range .Values.configmaps.names }}
            - configMapRef:
                name: {{ . }}
          {{- end }}
          {{- if and .Values.secrets.enabled .Values.secrets.toEnv }}
          {{- range .Values.secrets.toEnv }}
            - name: {{ .env }}
              valueFrom:
                secretKeyRef:
                  name: {{ $fullname }}-secrets
                  key: {{ .secret }}
          {{- end }}
          {{- end }}
          {{- if and .Values.secrets.enabled .Values.secrets.toEnvironments }}
            - secretRef:
                name: {{ $fullname }}-secrets-env
          {{- end }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.image.containerPort }}
              protocol: TCP
            {{- if and .Values.serviceMonitor.enabled (ne .Values.serviceMonitor.metricsPort .Values.image.containerPort) }}
            - name: metrics
              containerPort: {{ .Values.serviceMonitor.metricsPort }}
              protocol: TCP
            {{- end}}
            {{- if .Values.additionalPorts }}
            {{- range .Values.additionalPorts }}
            - name: {{ .name }}
              containerPort: {{ .containerPort }}
              protocol: {{ .protocol | default "TCP" }}
            {{- end }}
            {{- end }}
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            {{- if eq .Values.healthCheck.healthCheckType "http" }}
            httpGet:
              path: {{ .Values.healthCheck.healthCheckPath | quote }}
              port: http
            {{- else if eq .Values.healthCheck.healthCheckType "file" }}
            exec:
              command:
                - /bin/sh
                - -c
                - "if [ -f {{.Values.healthCheck.healthCheckPath }} ]; then rm -f {{.Values.healthCheck.healthCheckPath }}; else exit 1; fi"
            {{- else if eq .Values.healthCheck.healthCheckType "tcp" }}
            tcpSocket:
              port: {{ .Values.healthCheck.healthCheckPort }}            
            {{- end }}
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            successThreshold: {{ .Values.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          {{- if or (eq .Values.healthCheck.healthCheckType "http") (eq .Values.healthCheck.healthCheckType "tcp") }}
          readinessProbe:
            {{- if eq .Values.healthCheck.healthCheckType "http" }}
            httpGet:
              path: {{ .Values.healthCheck.healthCheckPath | quote }}
              port: http
            {{- else if eq .Values.healthCheck.healthCheckType "tcp" }}
            tcpSocket:
              port: {{ .Values.healthCheck.healthCheckPort }}
            {{- end }}              
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            successThreshold: {{ .Values.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.secrets.enabled }}
          {{- if .Values.secrets.toFiles}}
          volumeMounts:
          - name: secrets-volume
            mountPath: {{ .Values.secrets.secretsDir }}
          {{- end }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.secrets.enabled }}
      {{- if .Values.secrets.toFiles }}
      volumes:
      - name: secrets-volume
        secret:
          secretName: {{ $fullname }}-secrets
          items:
          {{- range .Values.secrets.toFiles }}
          - key: {{ .name }}
            path: {{ .name }}
          {{- end }}
      {{- end }}
      {{- end }}
